{
  "0795652d-0be8-4051-9d4d-d285d60630bb": {
    "filename": "CAB432_Lecture_5.1_-_Designing_for_Security.webm",
    "file_path": "data/videos/0795652d-0be8-4051-9d4d-d285d60630bb_CAB432_Lecture_5.1_-_Designing_for_Security.webm",
    "file_type": "video",
    "created_at": "2025-08-25T12:00:38.538303",
    "processed": true,
    "transcript": "another thing that's very useful is like there's and this comes up not just with security, but. should have to be that way. So if you're doing things well and thinking about them together,. Hello and welcome to week five. line for your application in the environment that you're operating. Where is that line between,. But you could have actually allocated those tasks in a different way amongst different entities. So maybe we'll just draw a diagram to here. And so you want to limit that as much as possible. then you don't break everybody else's code, right. So that's this isn't again, this kind of leaves. There are big things in the news where people have corners, and there have been bad consequences. Another principle is separation of concerns. the trade-offs and think about what those trade-offs are going to be. So one is that when you're creating. and demonstrating this service. what, once you've got the kind of the basics of, okay, I'm going to have least perlige or something,. happen at the same time by an attacker, for example, where they can change the configuration and. thing, different name, or Andy have also got those layered structures where you've got those kind. but we're going to try to put them into the cloud context. catch different stuff. They're not all going to catch the same thing. They're different, they're. And so the reason why here is because like,. keeping your software structured in a way that you'll be able to actually work on it. it modularity. And this is the same thing. And there's a lot of different ways that we achieve. So like sometimes it's actually good, but it does increase that friction there a little bit. down if you have a smaller entity. but that's not, that's not, that's good. on the server, that's not the end of it that we have, that we have another step to go. And one way,. allowing that thing to happen, right. for that. If you could download the PDF, these are some links to a couple of just articles. structure built into your app or allowing for your user authorization, then you can't do any. you know, then maybe it's, it's already vulnerable, but we don't want that to intersect. as a high priority item that needs to be designed in. Contacting the database directly is probably. you can apply at least privilege so that you end those two aspects are separated so that you,. big firewall in between there. So here it is a layering of things so that this subnet you can. Jix is going to do some stuff on. There's no almost always nobody has any business doing that. You know, one is, you know, data, one is serving. more personal example that people might have. Okay, and this is one that people probably don't. the methods as other public or private. And if it's declared as private, then other things can't use. buffering between these, between these two things. So each one of those things operates on a,. a resource like maybe creating a service or configuring a service. kind of a different, in a different way to prevent that kind of a cost from going through, but now we've. configuration as a task and we're not going to allow those two things, right. Another thing, kind of idea, kind of a basic idea is that when you have an opportunity to. the next meta bank or something like that, right. So you can use risk management stuff,. whereas you slice it the other direction, well, your data is protected. of things that it could do. didn't anticipate. And they're like, oh yes, well, here's the problem. And it's having a second. And those are things that you're going to read objects that you've got. good idea to have no filtering at all. There's some trade offs that it's okay to make and there's some. And so by having both of them, you can have that kind of that extra, extra layering for the defense in depth. you won't make use of those things that you're not supposed to make use of. And so an exalt and an. So maybe this would be, you know, like, I know users and comments are,. okay, making things up here, but, you know, there's different ways. What is it, but what would be a compromise. So this is kind of a hedge against forgetting your. of interfaces between the layers, where you can apply some lease privilege. Okay. So there are. that later ones with Jake, but you can have like kind of all these, all these servers here on. So we have to think about who is it that needs to do what. it and can come into connection to that entity. if one, especially with logging, because if one container is messing around and not doing. you will be seeing these again,. So it's so at least for a glitch, a castle is kind of two ideas. if you don't have that mechanism there, so you need to think about that when you're building your.",
    "transcript_path": "data/transcripts/0795652d-0be8-4051-9d4d-d285d60630bb_transcript.json",
    "transcript_metadata_path": "data/transcripts/0795652d-0be8-4051-9d4d-d285d60630bb_metadata.json",
    "summary": "another thing that's very useful is like there's and this comes up not just with security, but. should have to be that way. So if you're doing things well and thinking about them together,. Hello and welcome to week five. line for your application in the environment that you're operating.... (summary truncated)",
    "audio_path": "data/videos/0795652d-0be8-4051-9d4d-d285d60630bb_audio.wav"
  },
  "1100dacc-3c4b-4efc-8efb-a4fb45fd061c": {
    "filename": "CAB432_Lecture_5.1_-_Designing_for_Security.webm",
    "file_path": "data/videos/1100dacc-3c4b-4efc-8efb-a4fb45fd061c_CAB432_Lecture_5.1_-_Designing_for_Security.webm",
    "file_type": "video",
    "created_at": "2025-08-25T12:10:15.605600",
    "processed": true,
    "transcript": "another thing that's very useful is like there's and this comes up not just with security, but. should have to be that way. So if you're doing things well and thinking about them together,. Hello and welcome to week five. line for your application in the environment that you're operating. Where is that line between,. But you could have actually allocated those tasks in a different way amongst different entities. So maybe we'll just draw a diagram to here. And so you want to limit that as much as possible. then you don't break everybody else's code, right. So that's this isn't again, this kind of leaves. There are big things in the news where people have corners, and there have been bad consequences. Another principle is separation of concerns. the trade-offs and think about what those trade-offs are going to be. So one is that when you're creating. and demonstrating this service. what, once you've got the kind of the basics of, okay, I'm going to have least perlige or something,. happen at the same time by an attacker, for example, where they can change the configuration and. thing, different name, or Andy have also got those layered structures where you've got those kind. but we're going to try to put them into the cloud context. catch different stuff. They're not all going to catch the same thing. They're different, they're. And so the reason why here is because like,. keeping your software structured in a way that you'll be able to actually work on it. it modularity. And this is the same thing. And there's a lot of different ways that we achieve. So like sometimes it's actually good, but it does increase that friction there a little bit. down if you have a smaller entity. but that's not, that's not, that's good. on the server, that's not the end of it that we have, that we have another step to go. And one way,. allowing that thing to happen, right. for that. If you could download the PDF, these are some links to a couple of just articles. structure built into your app or allowing for your user authorization, then you can't do any. you know, then maybe it's, it's already vulnerable, but we don't want that to intersect. as a high priority item that needs to be designed in. Contacting the database directly is probably. you can apply at least privilege so that you end those two aspects are separated so that you,. big firewall in between there. So here it is a layering of things so that this subnet you can. Jix is going to do some stuff on. There's no almost always nobody has any business doing that. You know, one is, you know, data, one is serving. more personal example that people might have. Okay, and this is one that people probably don't. the methods as other public or private. And if it's declared as private, then other things can't use. buffering between these, between these two things. So each one of those things operates on a,. a resource like maybe creating a service or configuring a service. kind of a different, in a different way to prevent that kind of a cost from going through, but now we've. configuration as a task and we're not going to allow those two things, right. Another thing, kind of idea, kind of a basic idea is that when you have an opportunity to. the next meta bank or something like that, right. So you can use risk management stuff,. whereas you slice it the other direction, well, your data is protected. of things that it could do. didn't anticipate. And they're like, oh yes, well, here's the problem. And it's having a second. And those are things that you're going to read objects that you've got. good idea to have no filtering at all. There's some trade offs that it's okay to make and there's some. And so by having both of them, you can have that kind of that extra, extra layering for the defense in depth. you won't make use of those things that you're not supposed to make use of. And so an exalt and an. So maybe this would be, you know, like, I know users and comments are,. okay, making things up here, but, you know, there's different ways. What is it, but what would be a compromise. So this is kind of a hedge against forgetting your. of interfaces between the layers, where you can apply some lease privilege. Okay. So there are. that later ones with Jake, but you can have like kind of all these, all these servers here on. So we have to think about who is it that needs to do what. it and can come into connection to that entity. if one, especially with logging, because if one container is messing around and not doing. you will be seeing these again,. So it's so at least for a glitch, a castle is kind of two ideas. if you don't have that mechanism there, so you need to think about that when you're building your.",
    "transcript_path": "data/transcripts/1100dacc-3c4b-4efc-8efb-a4fb45fd061c_transcript.json",
    "transcript_metadata_path": "data/transcripts/1100dacc-3c4b-4efc-8efb-a4fb45fd061c_metadata.json",
    "summary": "another thing that's very useful is like there's and this comes up not just with security, but. should have to be that way. So if you're doing things well and thinking about them together,. Hello and welcome to week five. line for your application in the environment that you're operating.... (summary truncated)",
    "audio_path": "data/videos/1100dacc-3c4b-4efc-8efb-a4fb45fd061c_audio.wav"
  }
}